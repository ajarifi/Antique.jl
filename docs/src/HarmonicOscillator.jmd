```@meta
CurrentModule = Antiq
```

# Harmonic Oscillator

## Definitions

```@autodocs
Modules = [HarmonicOscillator]
```

## Usage

[Install Antiq.jl](index.html#Install) the first time. Run following command before use.

```julia; term = true; cache = true
using Antiq
```

The module name is `HarmonicOscillator` or `HO`. For example, the energy function is called as:

```julia; term = true
HO.E(n=0)
HO.E(n=1)
```

where, the default values of the parameters are follows:

```julia; term = true
HO.k
HO.m
HO.ℏ
```

Parameters can be specified by named variables:

```julia; term = true
HO.E(n=0, k=2)
HO.E(n=1, k=2)
```

## Examples

Wave functions:

```julia
using Plots
plot(xlim=(-5,5), xlabel="x", ylabel="ψ(x)")
plot!(x -> HO.ψ(x, n=0), label="n=0", lw=2)
plot!(x -> HO.ψ(x, n=1), label="n=1", lw=2)
plot!(x -> HO.ψ(x, n=2), label="n=2", lw=2)
plot!(x -> HO.ψ(x, n=3), label="n=3", lw=2)
plot!(x -> HO.ψ(x, n=4), label="n=4", lw=2)
```

Potential curve, Energy levels, Wave functions:

```julia
using Plots
plot(xlim=(-5.5,5.5), ylim=(-0.2,5.4), xlabel="\$x\$", ylabel="\$V(x),~E_n,~\\psi_n(x)\\times0.5+E_n\$", size=(480,400), dpi=400)
for n in 0:4
  # energy
  hline!([HO.E(n=n)], lc=:black, ls=:dash, label="")
  plot!([-sqrt(2*HO.k*HO.E(n=n)),sqrt(2*HO.k*HO.E(n=n))], fill(HO.E(n=n),2), lc=:black, lw=2, label="")
  # wave function
  plot!(x -> HO.E(n=n) + 0.5*HO.ψ(x,n=n), lc=n+1, lw=2, label="")
end
# potential
plot!(x -> HO.V(x), lc=:black, lw=2, label="")
```

## Tests

```julia; line_width = 500
include("../../test/HarmonicOscillator.jl")
```
