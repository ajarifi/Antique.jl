```@meta
CurrentModule = Antiq
```

# Infinite PotentialWell

## Definitions

```@autodocs
Modules = [InfinitePotentialWell]
```

## Usage

[Install Antiq.jl](index.html#Install) the first time. Run following command before use.

```julia; term = true; cache = true
using Antiq
```

The module name is `InfinitePotentialWell` or `IPW`. For example, the energy function is called as:

```julia; term = true
IPW.E(n=1)
IPW.E(n=2)
```

where, the default values of the parameters are follows:

```julia; term = true
IPW.L
IPW.m
IPW.ℏ
```

Parameters can be specified by named variables:

```julia; term = true
IPW.E(n=1, L=2)
IPW.E(n=2, L=2)
```

## Examples

Wave functions:

```julia
using Plots
plot(xlim=(0,1), xlabel="x", ylabel="ψ(x)")
plot!(x -> IPW.ψ(x, n=1), label="n=1", lw=2)
plot!(x -> IPW.ψ(x, n=2), label="n=2", lw=2)
plot!(x -> IPW.ψ(x, n=3), label="n=3", lw=2)
plot!(x -> IPW.ψ(x, n=4), label="n=4", lw=2)
plot!(x -> IPW.ψ(x, n=5), label="n=5", lw=2)
```

Potential curve, Energy levels, Wave functions:

```julia
L = 1
using Plots
plot(xlim=(-0.5,1.5), ylim=(-5,140), xlabel="\$x\$", ylabel="\$V(x),~E_n,~\\psi_n(x)\\times5+E_n\$", size=(480,400), dpi=400)
for n in 1:5
  # energy
  plot!([0,L], fill(IPW.E(n=n,L=L),2), lc=:black, lw=2, label="")
  # wave function
  plot!(0:0.01:L, x->IPW.E(n=n,L=L)+5*IPW.ψ(x,n=n,L=L), lc=n, lw=2, label="")
end
# potential
plot!([0,0,L,L], [140,0,0,140], lc=:black, lw=2, label="")
```

## Tests

```julia; line_width = 500
include("../../test/InfinitePotentialWell.jl")
```